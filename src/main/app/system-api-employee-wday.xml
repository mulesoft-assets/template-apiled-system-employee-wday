<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
	xmlns:validation="http://www.mulesoft.org/schema/mule/validation" xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:wd-connector="http://www.mulesoft.org/schema/mule/wd-connector"
	xmlns:json="http://www.mulesoft.org/schema/mule/json" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" 
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" 
	xmlns="http://www.mulesoft.org/schema/mule/core" 
	xmlns:apikit="http://www.mulesoft.org/schema/mule/apikit" 
	xmlns:http="http://www.mulesoft.org/schema/mule/http" 
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/wd-connector http://www.mulesoft.org/schema/mule/wd-connector/current/mule-wd-connector.xsd
http://www.mulesoft.org/schema/mule/apikit http://www.mulesoft.org/schema/mule/apikit/current/mule-apikit.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-current.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd">
	<context:property-placeholder location="common.properties, mule.${mule.env}.properties" />
    
    <http:listener-config name="system-api-httpListenerConfig" host="0.0.0.0" port="${http.port}" doc:name="HTTP Listener Configuration"/>
    
    <wd-connector:config name="Workday__Basic" username="${wday.user}" password="${wday.password}" tenantName="${wday.tenant}" hostName="${wday.hostname}" doc:name="Workday: Basic" testConnectivtyService="Human_Resources"/>
        
    <apikit:config name="system-api-config" raml="system-api.raml" consoleEnabled="true" consolePath="/console" doc:name="Router"/>
    
    <flow name="system-api-main">
        <http:listener config-ref="system-api-httpListenerConfig" path="/api/*" doc:name="HTTP"/>
        <apikit:router config-ref="system-api-config" doc:name="APIkit Router"/>
        <exception-strategy ref="system-api-apiKitGlobalExceptionMapping" doc:name="Reference Exception Strategy"/>
    </flow>

   
    <flow name="api-console">
        <http:listener config-ref="system-api-httpListenerConfig" path="/console" doc:name="Console"/>
        <apikit:console config-ref="system-api-config" doc:name="APIkit Console"/>
    </flow>
    
    <flow name="get:/employees:system-api-config">
        <set-variable variableName="queryParams" value="#[message.inboundProperties[&quot;http.query.params&quot;]]" doc:name="Save queryParams"/>
        <dw:transform-message doc:name="Prepare GetWorkers request">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml
%namespace ns0 urn:com.workday/bsvc
---
{
	ns0#Get_Workers_Request: {
		ns0#Request_Criteria: {
			(ns0#Transaction_Log_Criteria_Data: {
				ns0#Transaction_Date_Range_Data: {
					ns0#Updated_From: flowVars.queryParams.modifiedAfter,
					ns0#Updated_Through: now - |PT6S|
				}
			}) when (flowVars.queryParams.modifiedAfter?),
			ns0#Exclude_Inactive_Workers: true,
			ns0#Exclude_Employees: false,
			ns0#Exclude_Contingent_Workers: false
		},
		ns0#Response_Filter: {
			ns0#Page: flowVars.queryParams.page,
			ns0#Count: flowVars.queryParams.pageSize
		},
		ns0#Response_Group: {
			ns0#Include_Personal_Information: true,
			ns0#Include_Employment_Information: true,
			ns0#Include_Compensation: true
		}
	}
}
]]></dw:set-payload>
        </dw:transform-message>
        <wd-connector:invoke config-ref="Workday__Basic" type="Human_Resources||Get_Workers" doc:name="Get Workers from Workday"/>

        <dw:transform-message doc:name="Transform response to JSON output structure">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java

%function getCountryName(id){
	name: "USA" when (id == "bc33aa3152ec42d4995f4791a106ed09") otherwise "Not presented"
}

%function getCountryRegionName(id){
	name: "California" when (id == "ec3d210e4240442e99a28fa70419aec5") otherwise "Not presented"
}
---
payload.Get_Workers_Response.Response_Data.*Worker map {
	id: $.Worker_Data.Worker_ID,
	firstName: $.Worker_Data.Personal_Data.Name_Data.Legal_Name_Data.Name_Detail_Data.First_Name,
	lastName: $.Worker_Data.Personal_Data.Name_Data.Legal_Name_Data.Name_Detail_Data.Last_Name,
	addressLine: $.Worker_Data.Personal_Data.Contact_Data.Address_Data.Address_Line_Data,
	city: $.Worker_Data.Personal_Data.Contact_Data.Address_Data.Municipality,
	postalCode: $.Worker_Data.Personal_Data.Contact_Data.Address_Data.Postal_Code,
	country: getCountryName($.Worker_Data.Personal_Data.Contact_Data.Address_Data.Country_Reference.ID).name,
	region: getCountryRegionName($.Worker_Data.Personal_Data.Contact_Data.Address_Data.Country_Region_Reference.ID).name,
	birthDate: $.Worker_Data.Personal_Data.Birth_Date,
	phone: $.Worker_Data.Personal_Data.Contact_Data.Phone_Data.Phone_Number,
	email: $.Worker_Data.Personal_Data.Contact_Data.Email_Address_Data.Email_Address,
	positionTitle: $.Worker_Data.Employment_Data.Worker_Job_Data.Position_Data.Position_Title,
	hireDate: $.Worker_Data.Employment_Data.Worker_Job_Data.Position_Data.Start_Date,
	weeklyHours: $.Worker_Data.Employment_Data.Worker_Job_Data.Position_Data.Default_Weekly_Hours
}	]]></dw:set-payload>
        </dw:transform-message>
        <expression-component doc:name="Apply ordering"><![CDATA[import java.util.Map;
import java.util.HashMap;

Map fields = new HashMap();
fields.put("id","id");
fields.put("firstName", "firstName");
fields.put("lastName", "lastName");
fields.put("hireDate", "hireDate");

// ordering
if (!payload.isEmpty() && flowVars.queryParams != null && flowVars.queryParams.orderBy != null) {
	dwScript = "(payload orderBy  $." + fields.get(flowVars.queryParams.orderBy) + ")";
	if (flowVars.queryParams.order != null && flowVars.queryParams.order.equalsIgnoreCase("desc") ) {
		dwScript += "[-1..0]";
	}
	payload = dw(dwScript);
}]]></expression-component>
        <dw:transform-message doc:name="Transform payload into JSON output structure">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
payload]]></dw:set-payload>
        </dw:transform-message>

    </flow>
    
    <flow name="post:/employees:application/json:system-api-config">

        <json:json-to-object-transformer returnClass="java.util.Map" doc:name="JSON to Object" mimeType="application/java"/>
        <validation:all doc:name="Validate input JSON">
            <validation:validations>

                <validation:is-not-null value="#[payload.lastName]" message="Last name is required."/>
                <validation:is-not-null value="#[payload.addressLine]" message="Adress line is required."/>
                <validation:is-not-null value="#[payload.city]" message="City is required."/>
                <validation:is-not-null value="#[payload.country]" message="Country is required."/>
                <validation:is-not-null value="#[payload.postalCode]" message="Postal code is required."/>
                <validation:is-not-null value="#[payload.birthDate]" message="Birthdate is required."/>
                <validation:is-not-null value="#[payload.phone]" message="Phone is required."/>
                <validation:is-not-null value="#[payload.email]" message="Email is required."/>
                <validation:is-not-null value="#[payload.positionTitle]" message="Position title is required."/>
                <validation:is-not-null value="#[payload.weeklyHours]" message="Weekly hours are required."/>
                <validation:is-not-null value="#[payload.basePay]" message="Base pay is required."/>
                <validation:is-not-null value="#[payload.currency]" message="Currency is required."/>
                <validation:is-not-null value="#[payload.firstName]" message="First name is required."/>
            </validation:validations>

        </validation:all>
        <dw:transform-message doc:name="Prepare HireEmployee request" metadata:id="939fcd41-0403-4fe5-9a1d-4f163747e49b">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml
%namespace ns0 urn:com.workday/bsvc
---
{
	ns0#Hire_Employee_Request: {
		ns0#Hire_Employee_Data: {
			ns0#Applicant_Data: {
				ns0#Personal_Data: {
					ns0#Name_Data: {
						ns0#Legal_Name_Data: {
							ns0#Name_Detail_Data: {
								ns0#Country_Reference: {
									ns0#ID @(ns0#type: 'ISO_3166-1_Alpha-3_Code'): lookup("lookUpCountryFlow", payload.country)
								},
								ns0#First_Name: payload.firstName,
								ns0#Last_Name: payload.lastName
							}
						}
					},
					ns0#Birth_Date: payload.birthDate,
					ns0#Contact_Data: {
						ns0#Address_Data @(ns0#Effective_Date: now as :date): {
							ns0#Country_Reference: {
								ns0#ID @(ns0#type: 'ISO_3166-1_Alpha-3_Code'): lookup("lookUpCountryFlow", payload.country)
							},
							ns0#Address_Line_Data @(ns0#Type: 'ADDRESS_LINE_1'): payload.addressLine,
							ns0#Municipality: payload.city,
							(ns0#Country_Region_Reference: {
								ns0#ID @(ns0#type: 'Country_Region_ID'): lookup("lookUpCountryRegionFlow", payload.region)
							}) when (payload.region != null and payload.region != "Not presented"),
							ns0#Postal_Code: payload.postalCode,
							ns0#Usage_Data: {
								ns0#Type_Data @(ns0#Primary: true): {
									ns0#Type_Reference: {
										ns0#ID @(ns0#type: 'Communication_Usage_Type_ID'): 'HOME'
									}
								}
							}
						},
						ns0#Phone_Data: {
							ns0#International_Phone_Code: '1',
							ns0#Phone_Number: payload.phone,
							ns0#Phone_Device_Type_Reference: {
								ns0#ID @(ns0#type: 'Phone_Device_Type_ID'): '1063.5'
							},
							ns0#Usage_Data @(ns0#Public: true): {
								ns0#Type_Data @(ns0#Primary: true): {
									ns0#Type_Reference: {
										ns0#ID @(ns0#type: 'Communication_Usage_Type_ID'): 'HOME'
									}
								}
							}
						},
						ns0#Email_Address_Data: {
							ns0#Email_Address: payload.email,
							ns0#Usage_Data @(ns0#Public: true): {
								ns0#Type_Data @(ns0#Primary: true): {
									ns0#Type_Reference: {
										ns0#ID @(ns0#type: 'Communication_Usage_Type_ID'): 'HOME'
									}
								}
							}
						}
					}
				}
			},
			ns0#Organization_Reference: {
				ns0#ID @(ns0#type: 'Organization_Reference_ID'): p("wday.organization.reference.id")
			},
			ns0#Hire_Date: now as :date,
			ns0#Hire_Employee_Event_Data: {
				ns0#Employee_Type_Reference: {
					ns0#ID @(ns0#type: 'Employee_Type_ID'): 'Regular'
				},
				ns0#Position_Details: {
					ns0#Job_Profile_Reference: {
						ns0#ID @(ns0#type: 'Job_Profile_ID'): p("wday.job.profile.reference.id")
					},
					ns0#Position_Title: payload.positionTitle,
					ns0#Location_Reference: {
						ns0#ID @(ns0#type: 'Location_ID'): p("wday.position.location.reference.id")
					},
					ns0#Position_Time_Type_Reference: {
						ns0#ID @(ns0#type: 'Position_Time_Type_ID'): 'Full_time'
					},
					ns0#Default_Hours: payload.weeklyHours,
					ns0#Pay_Rate_Type_Reference: {
						ns0#ID @(ns0#type: 'Pay_Rate_Type_ID'): 'Salary'
					}
				}
			},
			ns0#Propose_Compensation_for_Hire_Sub_Process: {
				ns0#Propose_Compensation_for_Hire_Data: {
					ns0#Primary_Compensation_Basis: payload.basePay,
					ns0#Pay_Plan_Data: {
						ns0#Pay_Plan_Sub_Data: {
							ns0#Pay_Plan_Reference: {
								ns0#ID @(ns0#type: 'Compensation_Plan_ID'): 'SALARY_Hourly_Plan'
							},
							ns0#Amount: payload.basePay, 
							ns0#Currency_Reference: {
								ns0#ID @(ns0#type: 'Currency_ID'): payload.currency
							},
							ns0#Frequency_Reference: {
								ns0#ID @(ns0#type: 'Frequency_ID'): 'Annual'
							}
						}
					}
				}
			}
		}
	}
}]]></dw:set-payload>
        </dw:transform-message>
        <wd-connector:invoke config-ref="Workday__Basic" type="Staffing||Hire_Employee" doc:name="Hire Employee in Workday"/>
        <dw:transform-message doc:name="Get Id from Hire Employee response">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload.Hire_Employee_Event_Response.Employee_Reference]]></dw:set-payload>
        </dw:transform-message>

        <set-property propertyName="location" value="#[ 'http://' + '${api.domain}' + ':' + '${http.port}' + '${api.basePath}' + '/employees/' + payload.ID ]" doc:name="Set Location Header"/>
        <set-property propertyName="http.status" value="#[201]" doc:name="Set HTTP status"/>
        <dw:transform-message doc:name="Build response">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{ 
	id: payload.ID
}]]></dw:set-payload>
        </dw:transform-message>

    </flow>
    
    <flow name="get:/employees/{id}:system-api-config">
        <set-variable variableName="id" value="#[message.inboundProperties.'http.uri.params'.id]" doc:name="Save id"/>
        <dw:transform-message doc:name="Prepare FindEmployee request">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml
%namespace ns0 urn:com.workday/bsvc
---
{
	ns0#Employee_Find: {
		ns0#Employee_ID: flowVars.id
	}
}]]></dw:set-payload>
        </dw:transform-message>
        <wd-connector:invoke config-ref="Workday__Basic" type="Human_Resources||Find_Employee" doc:name="Find Employee from Workday"/>
        <dw:transform-message doc:name="Get Employee ID from the response">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload.Employee_References.Employee_Reference.Integration_ID_Reference.ID when (payload.Employee_References != "")
otherwise null]]></dw:set-payload>
        </dw:transform-message>

        <choice doc:name="Does Employee exist?">
            <when expression="#[payload != null]">
                <dw:transform-message doc:name="Prepare Get Employee request">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/xml
%namespace ns0 urn:com.workday/bsvc
---
{
	ns0#Employee_Get: {
		ns0#Employee_Reference: {
			ns0#Integration_ID_Reference: {
				ns0#ID @(ns0#System_ID: 'WD-EMPLID'): flowVars.id
			}
		}
	}
}]]></dw:set-payload>
                </dw:transform-message>
                <wd-connector:invoke config-ref="Workday__Basic" type="Human_Resources||Get_Employee" doc:name="Get Employee from Workday"/>
                <dw:transform-message doc:name="Transform response to JSON output structure">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/json
%namespace ns0 urn:com.workday/bsvc
---
using (	personData = payload.ns0#Employee.ns0#Employee_Data.ns0#Personal_Info_Data.ns0#Person_Data,
		employeeData = payload.ns0#Employee.ns0#Employee_Data){
	id: flowVars.id,
	firstName: personData.ns0#Name_Data.ns0#First_Name,
	lastName: personData.ns0#Name_Data.ns0#Last_Name,
	addressLine: personData.ns0#Contact_Data.ns0#Address_Data.ns0#Address_Line,
	city: personData.ns0#Contact_Data.ns0#Address_Data.ns0#Municipality,
	postalCode: personData.ns0#Contact_Data.ns0#Address_Data.ns0#Postal_Code,
	country: personData.ns0#Contact_Data.ns0#Address_Data.ns0#Country_Reference.ns0#Country_ISO_Code,
	region: personData.ns0#Contact_Data.ns0#Address_Data.ns0#Region,
	birthDate: personData.ns0#Biographic_Data.ns0#Date_Of_Birth,
	phone: personData.ns0#Contact_Data.ns0#Phone_Number_Data.ns0#Phone_Number,
	email: personData.ns0#Contact_Data.ns0#Internet_Email_Address_Data.ns0#Email_Address,
	positionTitle: employeeData.ns0#Worker_Position_Data.ns0#Position_Title,
	hireDate: employeeData.ns0#Worker_Status_Data.ns0#Hire_Date,
	weeklyHours: employeeData.ns0#Worker_Position_Data.ns0#Default_Weekly_Hours
}]]></dw:set-payload>
                </dw:transform-message>

            </when>
            <otherwise>
                <set-property propertyName="http.status" value="#[404]" doc:name="Resource Not Found"/>
                <set-payload value="{ &quot;message&quot;: &quot;Resource not found&quot; }" doc:name="Set Payload"/>
            </otherwise>
        </choice>


    </flow>
    <flow name="patch:/employees/{id}:application/json:system-api-config">
        <json:json-to-object-transformer returnClass="java.util.Map" mimeType="application/java" doc:name="JSON to Object"/>
        <validation:all doc:name="Validate input JSON">
            <validation:validations>
                <validation:is-true expression="#[(payload.country != null &amp;&amp; payload.postalCode != null &amp;&amp; payload.addressLine != null &amp;&amp; payload.city != null) || (payload.country == null &amp;&amp; payload.postalCode == null &amp;&amp; payload.addressLine == null &amp;&amp; payload.region == null &amp;&amp; payload.city == null)]" message="You have to specify the whole adress, which consists of address line, city, country, region and postal code."/>

            </validation:validations>
        </validation:all>
        <dw:transform-message doc:name="Prepare FindEmployee request">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml
%namespace ns0 urn:com.workday/bsvc
---
{
	ns0#Employee_Find: {
		ns0#Employee_ID: flowVars.id
	}
}]]></dw:set-payload>
            <dw:set-variable variableName="input"><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-variable>
        </dw:transform-message>
        <wd-connector:invoke config-ref="Workday__Basic" type="Human_Resources||Find_Employee" doc:name="Find Employee from Workday"/>
        <dw:transform-message doc:name="Get Employee ID from the response">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload.Employee_References.Employee_Reference.Integration_ID_Reference.ID when (payload.Employee_References != "")
otherwise null]]></dw:set-payload>
            <dw:set-variable variableName="employeeId"><![CDATA[%dw 1.0
%output application/java
---
payload.Employee_References.Employee_Reference.Integration_ID_Reference.ID when (payload.Employee_References != "")
otherwise null]]></dw:set-variable>
        </dw:transform-message>
        <choice doc:name="Does Employee exist?">
            <when expression="#[payload != null]">
                <dw:transform-message doc:name="Prepare MaintainContactInformation request">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/xml
%namespace ns0 urn:com.workday/bsvc
---
{
	ns0#Maintain_Contact_Information_for_Person_Event_Request: {
		ns0#Maintain_Contact_Information_Data: {
			ns0#Worker_Reference: {
				ns0#ID @(ns0#type: 'Employee_ID'): flowVars.id
			},
			ns0#Worker_Contact_Information_Data: {
				(ns0#Address_Data: {
					ns0#Country_Reference: {
						ns0#ID @(ns0#type: 'ISO_3166-1_Alpha-3_Code'): lookup("lookUpCountryFlow", flowVars.input.country)
					},
					ns0#Address_Line_Data @(ns0#Type: 'ADDRESS_LINE_1'): flowVars.input.adressLine,
					ns0#Municipality: flowVars.input.city,
					(ns0#Country_Region_Reference: {
						ns0#ID @(ns0#type: 'Country_Region_ID'): lookup("lookUpCountryRegionFlow", flowVars.input.region)
					}) when (payload.region != null and payload.region != "Not presented"),
					ns0#Postal_Code: flowVars.input.postalCode,
					ns0#Usage_Data: {
						ns0#Type_Data @(ns0#Primary: true): {
							ns0#Type_Reference: {
								ns0#ID @(ns0#type: 'Communication_Usage_Type_ID'): 'HOME'
							}
						}
					}
				}) when (flowVars.input.country?),
				(ns0#Phone_Data: {
					ns0#Phone_Number: flowVars.input.phone,
					ns0#International_Phone_Code: '1',
					ns0#Phone_Device_Type_Reference: {
						ns0#ID @(ns0#type: 'Phone_Device_Type_ID'): '1063.5'
					},
					ns0#Usage_Data @(ns0#Public: true): {
						ns0#Type_Data @(ns0#Primary: true): {
							ns0#Type_Reference: {
								ns0#ID @(ns0#type: 'Communication_Usage_Type_ID'): 'HOME'
							}
						}
					}
				}) when (flowVars.input.phone?),
				(ns0#Email_Address_Data: {
					ns0#Email_Address: flowVars.input.email,
					ns0#Usage_Data @(ns0#Public: true): {
						ns0#Type_Data @(ns0#Primary: true): {
							ns0#Type_Reference: {
								ns0#ID @(ns0#type: 'Communication_Usage_Type_ID'): 'HOME'
							}
						}
					}
				}) when (flowVars.input.email?)
			}
		}
	}
}]]></dw:set-payload>
                </dw:transform-message>
                <wd-connector:invoke config-ref="Workday__Basic" type="Human_Resources||Maintain_Contact_Information" doc:name="Maintain Contact Information in Workday"/>
                <dw:transform-message doc:name="Prepare JSON output structure">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	status: "OK"
}]]></dw:set-payload>
                </dw:transform-message>
            </when>
            <otherwise>
                <set-property propertyName="http.status" value="#[404]" doc:name="Resource Not Found"/>
                <set-payload value="{ &quot;message&quot;: &quot;Resource not found&quot; }" doc:name="Set Payload"/>
            </otherwise>
        </choice>
    </flow>

    
        
    
    <flow name="delete:/employees/{id}:system-api-config">
        <dw:transform-message doc:name="Prepare FindEmployee request">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml
%namespace ns0 urn:com.workday/bsvc
---
{
	ns0#Employee_Find: {
		ns0#Employee_ID: flowVars.id
	}
}]]></dw:set-payload>
        </dw:transform-message>
        <wd-connector:invoke config-ref="Workday__Basic" type="Human_Resources||Find_Employee" doc:name="Find Employee from Workday"/>
        <dw:transform-message doc:name="Get Employee ID from the response">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload.Employee_References.Employee_Reference.Integration_ID_Reference.ID when (payload.Employee_References != "")
otherwise null]]></dw:set-payload>
        </dw:transform-message>

        <choice doc:name="Does Employee exist?">
            <when expression="#[payload != null]">
                <dw:transform-message doc:name="Prepare TerminateEmployee request">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/xml
%namespace ns0 urn:com.workday/bsvc
---
{
	ns0#Terminate_Employee_Request: {
		ns0#Terminate_Employee_Data: {
			ns0#Employee_Reference: {
				ns0#ID @(ns0#type: 'Employee_ID'): flowVars.id
			},
			ns0#Termination_Date: now as :date,
			ns0#Terminate_Event_Data: {
				ns0#Primary_Reason_Reference: {
					ns0#ID @(ns0#type: 'WID'): p("wday.terminate.employee.primary.reason.id")
				}
			}
		}
	}
}]]></dw:set-payload>
                </dw:transform-message>
                <wd-connector:invoke config-ref="Workday__Basic" type="Staffing||Terminate_Employee" doc:name="Terminate Employee in Workday"/>
                <dw:transform-message doc:name="Prepare JSON output structure">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	status: "OK"
}]]></dw:set-payload>
                </dw:transform-message>



            </when>
            <otherwise>
                <set-property propertyName="http.status" value="#[404]" doc:name="Resource Not Found"/>
                <set-payload value="{ &quot;message&quot;: &quot;Resource not found&quot; }" doc:name="Set Payload"/>
            </otherwise>
        </choice>

    </flow>


<flow doc:description="The script uses data in the state field to add a region to the payload according to location." name="lookUpCountryFlow" processingStrategy="synchronous">
        <dw:transform-message doc:name="Get Country in Workday">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
using (country = upper payload)
	("USA" when (country == "US" or country == "USA") otherwise
	("GBR" when (country == "UK" or country == "GBR") otherwise payload))
]]></dw:set-payload>
        </dw:transform-message>


        <logger doc:name="Log the Country in Workday" level="INFO" message="Country is : #[payload]"/>
    </flow>
    
    <flow doc:description="The script uses data in the state field to add a region to the payload according to location." name="lookUpCountryRegionFlow" processingStrategy="synchronous">
        <dw:transform-message doc:name="Get Country region in Workday">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
using (countryRegion = upper payload)
	("USA-CA" when (countryRegion == "USA-CA") otherwise
	("Illinois" when (countryRegion == "ILLINOIS") otherwise payload))
]]></dw:set-payload>
        </dw:transform-message>

        <logger doc:name="Log the Country region in Workday" level="INFO" message="Country region is : #[payload]"/>
    </flow>


    <apikit:mapping-exception-strategy name="system-api-apiKitGlobalExceptionMapping">
        <apikit:mapping statusCode="404">
            <apikit:exception value="org.mule.module.apikit.exception.NotFoundException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Resource not found&quot; }" doc:name="Set Payload"/>
        </apikit:mapping>
        <apikit:mapping statusCode="405">
            <apikit:exception value="org.mule.module.apikit.exception.MethodNotAllowedException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Method not allowed&quot; }" doc:name="Set Payload"/>
        </apikit:mapping>
        <apikit:mapping statusCode="415">
            <apikit:exception value="org.mule.module.apikit.exception.UnsupportedMediaTypeException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Unsupported media type&quot; }" doc:name="Set Payload"/>
        </apikit:mapping>
        <apikit:mapping statusCode="406">
            <apikit:exception value="org.mule.module.apikit.exception.NotAcceptableException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Not acceptable&quot; }" doc:name="Set Payload"/>
        </apikit:mapping>        
        <apikit:mapping statusCode="422">
            <apikit:exception value="org.mule.extension.validation.api.MultipleValidationException"/>
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;#[exception.getMessage()]&quot; }" doc:name="Unprocessable entity"/>
        </apikit:mapping>
        <apikit:mapping statusCode="400">
            <apikit:exception value="org.mule.module.apikit.exception.BadRequestException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Bad request&quot; }" doc:name="Set Payload"/>
        </apikit:mapping>
    </apikit:mapping-exception-strategy>

</mule>
